```cpp
#ifndef MAIN_H
#define MAIN_H

#define MAX_BOOKS 1000
#define MAX_STR 100 // Maximum length for title, author
#define DATE_STR 11 // Length for borrowDate (dd/mm/yyyy + null terminator)

// Lớp cơ sở Book
class Book {
protected:
    int id; // mã số sách
    char title[MAX_STR]; // tiêu đề sách
    char author[MAX_STR]; // tác giả sách
    int quantity; // số lượng sách
    int borrowCount; // số lần sách được mượn

public:
    Book();
    Book(int id, const char* title, const char* author, int quantity);
    int getId() const;
    const char* getTitle() const;
    const char* getAuthor() const;
    int getQuantity() const;
    int getBorrowCount() const;
    void setQuantity(int qty);
    void incrementBorrowCount();
};

// Lớp dẫn xuất BorrowableBook
class BorrowableBook : public Book {
private:
    char borrowDate[DATE_STR]; // ngày mượn sách (dd/mm/yyyy)
    bool isBorrowed; // trạng thái mượn

public:
    BorrowableBook();
    BorrowableBook(int id, const char* title, const char* author, int quantity);
    void borrow(const char* date); // mượn sách
    void returnBook(); // trả sách
    const char* getBorrowDate() const;
    bool getIsBorrowed() const;
};

extern BorrowableBook library[MAX_BOOKS]; // mảng sách
extern int bookCount;

void loadBooks();           // tải sách từ file
void saveBooks();           // lưu ra file
void viewBooks();           // hiển thị sách
void addBook();             // thêm sách
void searchBooks();         // tìm kiếm sách
void issueBook();           // sách cho mượn
void returnBook();          // sách được trả
void statsMostBorrowed();   // thống kê sách được mượn nhiều nhất

#endif
```

### Implementation File: main.cpp
This file contains all implementations, including class methods, book management functions, and the main program loop.

<xaiArtifact artifact_id="2d17be32-5feb-4e46-8124-f37529da0fbe" artifact_version_id="b8235e8f-c76f-49c6-b389-92456612c401" title="main.cpp" contentType="text/x-c++src">
```cpp
#include <stdio.h>
#include <string.h>
#include <iostream>
#include "main.h"

using namespace std;

BorrowableBook library[MAX_BOOKS];
int bookCount = 0;

// Constructor của Book
Book::Book() : id(0), quantity(0), borrowCount(0) {
    title[0] = '\0';
    author[0] = '\0';
}

Book::Book(int id, const char* title, const char* author, int quantity)
    : id(id), quantity(quantity), borrowCount(0) {
    strncpy(this->title, title, MAX_STR - 1);
    this->title[MAX_STR - 1] = '\0';
    strncpy(this->author, author, MAX_STR - 1);
    this->author[MAX_STR - 1] = '\0';
}

int Book::getId() const { return id; }
const char* Book::getTitle() const { return title; }
const char* Book::getAuthor() const { return author; }
int Book::getQuantity() const { return quantity; }
int Book::getBorrowCount() const { return borrowCount; }
void Book::setQuantity(int qty) { quantity = qty; }
void Book::incrementBorrowCount() { borrowCount++; }

// Constructor của BorrowableBook
BorrowableBook::BorrowableBook() : Book(), isBorrowed(false) {
    borrowDate[0] = '\0';
}

BorrowableBook::BorrowableBook(int id, const char* title, const char* author, int quantity)
    : Book(id, title, author, quantity), isBorrowed(false) {
    borrowDate[0] = '\0';
}

void BorrowableBook::borrow(const char* date) {
    if (quantity > 0 && !isBorrowed) {
        strncpy(borrowDate, date, DATE_STR - 1);
        borrowDate[DATE_STR - 1] = '\0';
        isBorrowed = true;
        quantity--;
        incrementBorrowCount();
    } else {
        cout << "Khong the muon sach: " << (quantity <= 0 ? "Het sach" : "Sach da duoc muon") << "\n";
    }
}

void BorrowableBook::returnBook() {
    if (isBorrowed) {
        borrowDate[0] = '\0';
        isBorrowed = false;
        quantity++;
    }
}

const char* BorrowableBook::getBorrowDate() const { return borrowDate; }
bool BorrowableBook::getIsBorrowed() const { return isBorrowed; }

// Đọc sách từ tệp nhị phân books.bin
void loadBooks() {
    FILE* binFile = fopen("books.bin", "rb");
    if (!binFile) {
        cout << "Khong the mo file books.bin de doc! Tao file moi...\n";
        return;
    }

    // Read bookCount
    int readCount;
    if (fread(&readCount, sizeof(int), 1, binFile) != 1 || readCount < 0 || readCount > MAX_BOOKS) {
        cout << "Du lieu file books.bin khong hop le!\n";
        fclose(binFile);
        return;
    }
    bookCount = readCount;

    // Read books
    for (int i = 0; i < bookCount; i++) {
        if (fread(&library[i], sizeof(BorrowableBook), 1, binFile) != 1) {
            cout << "Loi doc du lieu sach thu " << i + 1 << "!\n";
            bookCount = i; // Truncate to valid books
            break;
        }
        // Basic validation
        if (library[i].getId() <= 0 || library[i].getQuantity() < 0) {
            cout << "Du lieu sach ID " << library[i].getId() << " khong hop le!\n";
            bookCount = i;
            break;
        }
    }
    fclose(binFile);
    cout << "Da tai " << bookCount << " sach tu file books.bin.\n";
}

// Lưu sách vào cả file văn bản (library.txt) và file nhị phân (books.bin)
void saveBooks() {
    // Lưu vào file văn bản
    FILE* txtFile = fopen("library.txt", "w");
    if (txtFile == NULL) {
        cout << "Khong the mo file library.txt de ghi!\n";
        return;
    }
    fprintf(txtFile, "+------+-------------------------+-------------------------+----------+------------+----------------+\n");
    fprintf(txtFile, "| ID   | Tieu de                 | Tac gia                 | So luong | So lan muon| Ngay muon      |\n");
    fprintf(txtFile, "+------+-------------------------+-------------------------+----------+------------+----------------+\n");
    for (int i = 0; i < bookCount; i++) {
        fprintf(txtFile, "| %-4d | %-23s | %-23s | %-8d | %-10d | %-14s |\n",
                library[i].getId(),
                library[i].getTitle(),
                library[i].getAuthor(),
                library[i].getQuantity(),
                library[i].getBorrowCount(),
                library[i].getBorrowDate());
    }
    fprintf(txtFile, "+------+-------------------------+-------------------------+----------+------------+----------------+\n");
    fclose(txtFile);
    cout << "Da luu du lieu vao file library.txt.\n";

    // Lưu vào file nhị phân
    FILE* binFile = fopen("books.bin", "wb");
    if (!binFile) {
        cout << "Khong the mo file books.bin de ghi!\n";
        return;
    }
    fwrite(&bookCount, sizeof(int), 1, binFile);
    fwrite(library, sizeof(BorrowableBook), bookCount, binFile);
    fclose(binFile);
    cout << "Da luu du lieu vao file books.bin.\n";
}

// Hiển thị danh sách sách
void viewBooks() {
    if (bookCount == 0) {
        cout << "Thu vien trong!\n";
        return;
    }
    cout << "=== DANH SACH SACH ===\n";
    for (int i = 0; i < bookCount; i++) {
        cout << "ID: " << library[i].getId() << "\n";
        cout << "Tieu de: " << (library[i].getTitle()[0] ? library[i].getTitle() : "(trong)") << "\n";
        cout << "Tac gia: " << (library[i].getAuthor()[0] ? library[i].getAuthor() : "(trong)") << "\n";
        cout << "So luong: " << library[i].getQuantity() << "\n";
        cout << "So lan muon: " << library[i].getBorrowCount() << "\n";
        cout << "Ngay muon: " << (library[i].getIsBorrowed() ? library[i].getBorrowDate() : "Chua muon") << "\n";
        cout << "--------------------\n";
    }
}

// Thêm sách mới
void addBook() {
    if (bookCount >= MAX_BOOKS) {
        cout << "Thu vien da day, khong the them sach moi!\n";
        return;
    }

    char title[MAX_STR], author[MAX_STR];
    int quantity;
    cout << "Nhap tieu de sach: ";
    cin.getline(title, MAX_STR);
    cout << "Nhap tac gia: ";
    cin.getline(author, MAX_STR);
    cout << "Nhap so luong: ";
    cin >> quantity;
    cin.ignore();

    library[bookCount] = BorrowableBook(bookCount + 1, title, author, quantity);
    bookCount++;
    saveBooks();
    cout << "Them sach thanh cong!\n";
}

// Tìm kiếm sách
void searchBooks() {
    char searchTerm[MAX_STR];
    int choice;
    cout << "Tim kiem theo:\n1. Tieu de\n2. Tac gia\nNhap lua chon: ";
    cin >> choice;
    cin.ignore();
    cout << "Nhap tu khoa: ";
    cin.getline(searchTerm, MAX_STR);

    int found = 0;
    for (int i = 0; i < bookCount; i++) {
        bool match = false;
        if (choice == 1 && strstr(library[i].getTitle(), searchTerm)) match = true;
        if (choice == 2 && strstr(library[i].getAuthor(), searchTerm)) match = true;

        if (match) {
            if (!found) cout << "Ket qua tim kiem:\n";
            cout << "ID: " << library[i].getId()
                 << ", Tieu de: " << library[i].getTitle()
                 << ", Tac gia: " << library[i].getAuthor()
                 << ", So luong: " << library[i].getQuantity()
                 << ", So lan muon: " << library[i].getBorrowCount() << "\n";
            found = 1;
        }
    }
    if (!found) cout << "Khong tim thay sach nao voi tu khoa '" << searchTerm << "'!\n";
}

// Phát hành (mượn) sách
void issueBook() {
    int id;
    char date[DATE_STR];
    cout << "Nhap ID sach muon: ";
    cin >> id;
    cin.ignore();
    cout << "Nhap ngay muon (dd/mm/yyyy): ";
    cin.getline(date, DATE_STR);

    // Validate date format (dd/mm/yyyy)
    if (strlen(date) != 10 || date[2] != '/' || date[5] != '/' ||
        !isdigit(date[0]) || !isdigit(date[1]) ||
        !isdigit(date[3]) || !isdigit(date[4]) ||
        !isdigit(date[6]) || !isdigit(date[7]) || !isdigit(date[8]) || !isdigit(date[9])) {
        cout << "Ngay muon khong dung dinh dang (dd/mm/yyyy)!\n";
        return;
    }

    for (int i = 0; i < bookCount; i++) {
        if (library[i].getId() == id) {
            if (library[i].getQuantity() > 0) {
                library[i].borrow(date);
                saveBooks();
                cout << "Da muon sach ID " << id << " thanh cong!\n";
            } else {
                cout << "Sach ID " << id << " da het!\n";
            }
            return;
        }
    }
    cout << "Khong tim thay sach voi ID " << id << "!\n";
}

// Trả sách
void returnBook() {
    int id;
    cout << "Nhap ID sach tra: ";
    cin >> id;
    cin.ignore();

    for (int i = 0; i < bookCount; i++) {
        if (library[i].getId() == id) {
            library[i].returnBook();
            saveBooks();
            cout << "Da tra sach ID " << id << " thanh cong!\n";
            return;
        }
    }
    cout << "Khong tim thay sach voi ID " << id << "!\n";
}

// Thống kê sách được mượn nhiều nhất
void statsMostBorrowed() {
    if (bookCount == 0) {
        cout << "Thu vien trong!\n";
        return;
    }

    int maxBorrowCount = 0;
    int maxIndex = 0;
    for (int i = 0; i < bookCount; i++) {
        if (library[i].getBorrowCount() > maxBorrowCount) {
            maxBorrowCount = library[i].getBorrowCount();
            maxIndex = i;
        }
    }

    cout << "=== SACH DUOC MUON NHIEU NHAT ===\n";
    cout << "ID: " << library[maxIndex].getId() << "\n";
    cout << "Tieu de: " << library[maxIndex].getTitle() << "\n";
    cout << "Tac gia: " << library[maxIndex].getAuthor() << "\n";
    cout << "So luong: " << library[maxIndex].getQuantity() << "\n";
    cout << "So lan muon: " << library[maxIndex].getBorrowCount() << "\n";
    cout << "--------------------\n";

    for (int i = 0; i < bookCount; i++) {
        if (i != maxIndex && library[i].getBorrowCount() == maxBorrowCount) {
            cout << "ID: " << library[i].getId() << "\n";
            cout << "Tieu de: " << library[i].getTitle() << "\n";
            cout << "Tac gia: " << library[i].getAuthor() << "\n";
            cout << "So luong: " << library[i].getQuantity() << "\n";
            cout << "So lan muon: " << library[i].getBorrowCount() << "\n";
            cout << "--------------------\n";
        }
    }
}

int main() {
    loadBooks();
    int choice;

    do {
        cout << "\n=== HE THONG QUAN LY THU VIEN ===\n";
        cout << "1. Add a book\n";
        cout << "2. View all books\n";
        cout << "3. Search books\n";
        cout << "4. Issue a book\n";
        cout << "5. Return a book\n";
        cout << "6. Stats most borrowed\n";
        cout << "7. Exit\n";
        cout << "Nhap lua chon: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1:
                cout << "\n";
                addBook();
                break;
            case 2:
                cout << "\n";
                viewBooks();
                break;
            case 3:
                cout << "\n";
                searchBooks();
                break;
            case 4:
                cout << "\n";
                issueBook();
                break;
            case 5:
                cout << "\n";
                returnBook();
                break;
            case 6:
                cout << "\n";
                statsMostBorrowed();
                break;
            case 7:
                cout << "\n";
                cout << "Thoat chuong trinh.\n";
                break;
            default:
                cout << "\n";
                cout << "Lua chon khong hop le!\n";
        }
    } while (choice != 7);
    saveBooks();

    return 0;
}
```

### Key Changes and Fixes
1. **Fixed `std::length_error`**:
   - Replaced `std::string` with `char[MAX_STR]` for `title` and `author`, and `char[DATE_STR]` for `borrowDate` (11 chars for `dd/mm/yyyy` + null terminator).
   - This makes `BorrowableBook` a POD type, allowing safe binary I/O with `fread`/`fwrite`, eliminating the `std::length_error` caused by invalid string lengths.

2. **Robust Binary I/O**:
   - `loadBooks` reads `bookCount` first, validates it, and then reads `BorrowableBook` objects directly. It checks for invalid `id` or `quantity` to prevent crashes.
   - `saveBooks` writes `bookCount` followed by the `library` array, ensuring compatibility.

3. **Date Validation in `issueBook`**:
   - Ensures the date input is exactly `dd/mm/yyyy` (e.g., `22/03/2025`), preventing crashes from inputs like `22 3 2025`.

4. **Two-File Structure**:
   - `main.h`: Contains class definitions and function declarations.
   - `main.cpp`: Contains all implementations (class methods, book management functions, and main loop).

5. **Simplified Code**:
   - Uses `FILE*` for binary I/O to keep it basic.
   - Avoids complex C++ features like exceptions or dynamic memory beyond fixed-size arrays.

### Compilation and Testing
1. **Compile the Code**:
   Save the files as `main.h` and `main.cpp`, then compile:
   ```bash
   g++ -g main.cpp -o main
   ```
   The `-g` flag enables debugging. Optionally, use AddressSanitizer:
   ```bash
   g++ -fsanitize=address -g main.cpp -o main
   ```

2. **Delete `books.bin`**:
   The old `books.bin` is incompatible due to the previous `std::string` format. Remove it:
   ```bash
   rm books.bin
   ```

3. **Test the Program**:
   - Run `./main`.
   - **Add a book (option `1`)**:
     - Title: `Test Book`
     - Author: `Test Author`
     - Quantity: `5`
   - **View books (option `2`)** to confirm the book displays:
     ```
     === DANH SACH SACH ===
     ID: 1
     Tieu de: Test Book
     Tac gia: Test Author
     So luong: 5
     So lan muon: 0
     Ngay muon: Chua muon
     --------------------
     ```
   - **Issue a book (option `4`)** with ID `1` and date `22/03/2025`.
   - **Check `library.txt`** for the formatted output:
     ```
     +------+-------------------------+-------------------------+----------+------------+----------------+
     | ID   | Tieu de                 | Tac gia                 | So luong | So lan muon| Ngay muon      |
     +------+-------------------------+-------------------------+----------+------------+----------------+
     | 1    | Test Book               | Test Author             | 4        | 1          | 22/03/2025     |
     +------+-------------------------+-------------------------+----------+------------+----------------+
     ```
   - Exit (option `7`) and rerun to verify `books.bin` loads correctly.

4. **Debugging if Needed**:
   If a crash occurs, use `gdb`:
   ```bash
   gdb ./main
   (gdb) run
   (gdb) backtrace
   ```
   Or use Valgrind:
   ```bash
   valgrind ./main
   ```

### Why This Fixes the Issue
- **No `std::string` Issues**: Using `char[]` eliminates dynamic memory issues and `std::length_error` from invalid string lengths.
- **Safe Binary I/O**: Direct `fread`/`fwrite` of `BorrowableBook` is safe since all members are POD.
- **Date Validation**: Prevents crashes from malformed date inputs like `22 3 2025`.
- **Two-File Structure**: Organizes code into one header and one implementation file, as requested.
- **Basic Validation**: Checks in `loadBooks` ensure corrupted data doesn’t cause crashes.

### Notes
- **String Length Limits**: Titles and authors are limited to 99 characters (`MAX_STR - 1`). Adjust `MAX_STR` if needed.
- **Date Validation**: The `issueBook` function checks for `dd/mm/yyyy` format but not semantic validity (e.g., `31/04/2025` is accepted). Add stricter checks if required.
- **File Permissions**: Ensure the program has write permissions for `books.bin` and `library.txt`.
- **If Issues Persist**: Share the program output, `library.txt` contents, or `gdb`/Valgrind output for further debugging.

This code should run without crashes and handle all operations correctly. Let me know if you need help testing or adding features!